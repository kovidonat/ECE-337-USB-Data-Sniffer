-- VHDL Entity My_Lib.interceptor.symbol
--
-- Created:
--          by - mg55.bin (srge02.ecn.purdue.edu)
--          at - 14:37:58 04/21/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY interceptor IS
   PORT( 
      clk                         : IN     std_logic;
      eop                         : IN     std_logic;
      intercept                   : IN     std_logic;
      inst                        : IN     std_logic_vector (3 DOWNTO 0);
      rst                         : IN     std_logic;
      usbclk                      : IN     std_logic;
      dataPlus                    : OUT    std_logic;
      dataMinus                   : OUT    std_logic;
      computerMinus               : INOUT  std_logic;
      computerPlus                : INOUT  std_logic;
      usbMinus                    : INOUT  std_logic;
      usbPlus                     : INOUT  std_logic
   );

-- Declarations

END interceptor ;

--
-- VHDL Architecture My_Lib.interceptor.struct
--
-- Created:
--          by - mg55.bin (srge02.ecn.purdue.edu)
--          at - 14:37:58 04/21/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE IEEE.std_logic_unsigned.all;

ARCHITECTURE struct OF interceptor IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL computerDataMinus       : std_logic;
   SIGNAL computerDataMinusOutput : std_logic;
   SIGNAL computerDataPlus        : std_logic;
   SIGNAL computerDataPlusOutput  : std_logic;
   SIGNAL computerLock            : std_logic;
   SIGNAL usbDataMinus            : std_logic;
   SIGNAL usbDataMinusOutput      : std_logic;
   SIGNAL usbDataPlus             : std_logic;
   SIGNAL usbDataPlusOutput       : std_logic;
   SIGNAL usbLock                 : std_logic;


   -- Component Declarations
   COMPONENT computerInterceptor
   PORT (
      clk                         : IN     std_logic;
      computerDataMinus           : IN     std_logic;
      computerDataPlus            : IN     std_logic;
      computerLock                : IN     std_logic;
      eop : in std_logic;
      rst                         : IN     std_logic;
      usbClk                      : IN     std_logic;
      computerDataMinusOutput     : OUT    std_logic;
      computerDataPlusOutput      : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT lockingDetector
   PORT (
      clk          : IN     std_logic;
      endOfPacket  : IN     std_logic;
      inst     : IN     std_logic_vector ( 3 DOWNTO 0 );
      rst          : IN     std_logic;
      computerLock : OUT    std_logic;
      usbLock      : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT tristate
   PORT (
      interceptorOutput : IN     std_logic;
      lock              : IN     std_logic;
      interceptorInput  : OUT    std_logic;
      dataLine          : INOUT  std_logic
   );
   END COMPONENT;
   COMPONENT usbInterceptor
   PORT (
      clk                    : IN     std_logic;
      intercept              : IN     std_logic;
      rst                    : IN     std_logic;
      usbClk                 : IN     std_logic;
      eop                    : in std_logic;
      usbDataMinus           : IN     std_logic;
      usbDataPlus            : IN     std_logic;
      usbLock                : IN     std_logic;
      usbDataMinusOutput     : OUT    std_logic;
      usbDataPlusOutput      : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_0 : computerInterceptor
      PORT MAP (
         usbClk                      => usbclk,
         rst                         => rst,
         computerDataPlus            => computerDataPlus,
         computerDataMinus           => computerDataMinus,
         computerLock                => computerLock,
         clk                         => clk,
         eop => eop,
         computerDataPlusOutput      => computerDataPlusOutput,
         computerDataMinusOutput     => computerDataMinusOutput
      );
   U_1 : lockingDetector
      PORT MAP (
         endOfPacket  => eop,
         rst          => rst,
         clk          => clk,
         inst         => inst,
         usbLock      => usbLock,
         computerLock => computerLock
      );
   U_2 : tristate -- D- usb to computer
      PORT MAP ( 
         lock              => computerLock,
         interceptorOutput => computerDataMinusOutput, 
         interceptorInput  => usbDataMinus,
         dataLine          => usbMinus
      );
   U_3 : tristate  -- D+ computer to USB
      PORT MAP (
         lock              => usbLock,  
         interceptorOutput => usbDataPlusOutput, 
         interceptorInput  => computerDataPlus,
         dataLine          => computerPlus
      );
   U_5 : tristate -- D+ usb
      PORT MAP (
         lock              => computerLock, 
         interceptorOutput => computerDataPlusOutput, 
         interceptorInput  => usbDataPlus,
         dataLine          => usbPlus
      );
   U_6 : tristate -- D- computer
      PORT MAP (
         lock              => usbLock,
         interceptorOutput => usbDataMinusOutput, 
         interceptorInput  => computerDataMinus,
         dataLine          => computerMinus
      );
   U_4 : usbInterceptor
      PORT MAP (
         usbClk                 => usbclk,
         rst                    => rst,
         intercept              => intercept,
         usbDataPlus            => usbDataPlus,
         eop => eop,
         usbDataMinus           => usbDataMinus,
         usbLock                => usbLock,
         clk                    => clk,
         usbDataPlusOutput      => usbDataPlusOutput,
         usbDataMinusOutput     => usbDataMinusOutput
      );

      dataPlus <= usbPlus when usbLock = '1' -- logic for the output to the detector for the D+ line
                  else computerPlus when computerLock = '1'
                  else '1';
                    
      dataMinus <= usbMinus when usbLock = '1' -- logic for the output to the detector for the D- line
                  else computerMinus when computerLock = '1'
                  else '1';  

END struct;
