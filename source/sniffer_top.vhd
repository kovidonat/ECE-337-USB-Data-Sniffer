-- VHDL Entity My_Lib.sniffer_top.symbol
--
-- Created:
--          by - mg58.bin (srge03.ecn.purdue.edu)
--          at - 14:32:23 04/22/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY sniffer_top IS
   PORT( 
      clk           : IN     std_logic;
      rst           : IN     std_logic;
      dataOut       : OUT    std_logic;
      scl           : OUT    std_logic;
      sd_enable     : OUT    std_logic;
      dataMinusComputer : INOUT  std_logic;
      dataPlusComputer  : INOUT  std_logic;
      dataMinusUsb      : INOUT  std_logic;
      dataPlusUsb       : INOUT  std_logic
   );

-- Declarations

END sniffer_top ;

--
-- VHDL Architecture My_Lib.sniffer_top.struct
--
-- Created:
--          by - mg58.bin (srge03.ecn.purdue.edu)
--          at - 14:32:23 04/22/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2010.2a (Build 7)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE IEEE.std_logic_unsigned.all;
USE ieee.numeric_std.all;


ARCHITECTURE struct OF sniffer_top IS

   -- Architecture declarations

   -- Internal signal declarations
   --SIGNAL address    : STD_LOGIC;
   SIGNAL clk_mode   : std_logic;
   SIGNAL dataMinus  : std_logic;
   SIGNAL dataPlus   : std_logic;
   SIGNAL data_out   : STD_LOGIC_VECTOR(7 DOWNTO 0);
   SIGNAL data_read  : std_logic;
   SIGNAL data_ready : std_logic_vector(1 DOWNTO 0);
   SIGNAL dclk       : STD_LOGIC;
   SIGNAL dout       : std_logic_vector(7 DOWNTO 0);
   SIGNAL eop        : std_logic;
   SIGNAL fifoEmpty  : std_logic;
   SIGNAL fifoFull   : std_logic;
   SIGNAL fifo_read  : std_logic;
   SIGNAL fifo_write : std_logic;
   SIGNAL inst       : STD_LOGIC_VECTOR(3 DOWNTO 0);
   SIGNAL intercept  : std_logic;
   SIGNAL rData      : std_logic_vector(7 DOWNTO 0);
   SIGNAL sclEnable  : std_logic;
   SIGNAL tsrEnable  : std_logic;
   SIGNAL tsrLoad    : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL scl_internal : std_logic;


   -- Component Declarations
   COMPONENT FifoTop
   GENERIC (
      gregLength : integer := 4;
      gregWidth  : integer := 8;
      addrSize  : integer := 2      -- 2^addrSize = gregLength
   );
   PORT (
      clk       : IN     std_logic;
      rEnable   : IN     std_logic;
      resetN    : IN     std_logic;
      wData     : IN     std_logic_vector (gregWidth-1 DOWNTO 0);
      wEnable   : IN     std_logic;
      fifoEmpty : OUT    std_logic;
      fifoFull  : OUT    std_logic;
      rData     : OUT    std_logic_vector (gregWidth-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT SpiClkDivide
   GENERIC (
      spiDivSlow : std_logic_vector(8 downto 0) := "101100101";      -- 357, clocks downto 400 kHz
      spiDivFast : std_logic_vector(1 downto 0) := "11";            -- 6, clocks downto 28 MHz-ish
      sclPol     : integer                      := 0;
      sclPha     : integer                      := 0
   );
   PORT (
      clk       : IN     std_logic;
      resetN    : IN     std_logic;
      sclEnable : IN     std_logic;
      sclSpeed  : IN     std_logic;
      scl       : OUT    std_logic;
      tsrEnable : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT SpiXmitSR
   GENERIC (
      srWidth : integer := 8
   );
   PORT (
      clk       : IN     std_logic;
      resetN    : IN     std_logic;
      tsrData   : IN     std_logic_vector (srWidth-1 DOWNTO 0);
      tsrEnable : IN     std_logic;
      tsrLoad   : IN     std_logic;
      dataOut   : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT controller
   PORT (
      clk                 : IN     std_logic;
      data_read           : IN     std_logic;
      data_ready          : IN     std_logic_vector (1 DOWNTO 0);
      decoder_instruction : IN     std_logic_vector (3 DOWNTO 0);
      eop_found           : IN     std_logic;
      fifo_full           : IN     std_logic;
      rst                 : IN     std_logic;
      fifo_read           : OUT    std_logic;
      fifo_write          : OUT    std_logic;
      intercept           : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT decoder
   PORT (
      clk      : IN     STD_LOGIC;
      data0    : IN     STD_LOGIC;
      data1    : IN     STD_LOGIC;
      halt     : IN     STD_LOGIC;
      rst      : IN     STD_LOGIC;
     -- address  : OUT    STD_LOGIC;
      data     : OUT    STD_LOGIC_VECTOR (1 DOWNTO 0);
      data_out : OUT    STD_LOGIC_VECTOR (7 DOWNTO 0);
      dclk     : OUT    STD_LOGIC;
      eopOut   : OUT    STD_LOGIC;
      inst     : OUT    STD_LOGIC_VECTOR (3 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT interceptor
   PORT (
      clk           : IN     std_logic;
      eop           : IN     std_logic;
      inst          : IN     std_logic_vector (3 DOWNTO 0);
      intercept     : IN     std_logic;
      rst           : IN     std_logic;
      usbclk        : IN     std_logic;
      dataMinus     : OUT    std_logic;
      dataPlus      : OUT    std_logic;
      computerMinus : INOUT  std_logic;
      computerPlus  : INOUT  std_logic;
      usbMinus      : INOUT  std_logic;
      usbPlus       : INOUT  std_logic
   );
   END COMPONENT;
   COMPONENT sd_control
   PORT (
      clk        : IN     std_logic;
      data_in    : IN     std_logic_vector (7 DOWNTO 0);
      fifo_empty : IN     std_logic;
      rst        : IN     std_logic;
      sd_clock   : IN     std_logic;
      clk_enable : OUT    std_logic;
      clk_mode   : OUT    std_logic;
      data_out   : OUT    std_logic_vector (7 DOWNTO 0);
      data_read  : OUT    std_logic;
      sd_enable  : OUT    std_logic;
      tsr_load   : OUT    std_logic
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_2 : FifoTop
      GENERIC MAP (
         gregLength => 4,
         gregWidth  => 8,
         addrSize  => 2         -- 2^addrSize = gregLength
      )
      PORT MAP (
         clk       => clk,
         rEnable   => fifo_read,
         resetN    => rst,
         wData     => data_out,
         wEnable   => fifo_write,
         fifoEmpty => fifoEmpty,
         fifoFull  => fifoFull,
         rData     => rData
      );
   U_5 : SpiClkDivide
      GENERIC MAP (
         spiDivSlow => "101100101",               -- 357, clocks downto 400 kHz
         spiDivFast => "11",                     -- 6, clocks downto 28 MHz-ish
         sclPol     => 0,
         sclPha     => 0
      )
      PORT MAP (
         clk       => clk,
         resetN    => rst,
         sclEnable => sclEnable,
         sclSpeed  => clk_mode,
         tsrEnable => tsrEnable,
         scl       => scl_internal
      );
   U_4 : SpiXmitSR
      GENERIC MAP (
         srWidth => 8
      )
      PORT MAP (
         clk       => clk,
         resetN    => rst,
         tsrEnable => tsrEnable,
         tsrLoad   => tsrLoad,
         tsrData   => dout,
         dataOut   => dataOut
      );
   U_0 : controller
      PORT MAP (
         clk                 => clk,
         rst                 => rst,
         fifo_full           => fifoFull,
         decoder_instruction => inst,
         data_ready          => data_ready,
         eop_found           => eop,
         data_read           => data_read,
         fifo_read           => fifo_read,
         fifo_write          => fifo_write,
         intercept           => intercept
      );
   U_1 : decoder
      PORT MAP (
         clk      => clk,
         rst      => rst,
         data0    => dataPlus,
         data1    => dataMinus,
         halt     => intercept,
         data     => data_ready,
        -- address  => address,
         inst     => inst,
         data_out => data_out,
         dclk     => dclk,
         eopOut   => eop
      );
   U_3 : interceptor
      PORT MAP (
         clk           => clk,
         eop           => eop,
         intercept     => intercept,
         inst          => inst,
         rst           => rst,
         usbclk        => dclk,
         dataPlus      => dataPlus,
         dataMinus     => dataMinus,
         computerMinus => dataMinusComputer,
         computerPlus  => dataPlusComputer,
         usbMinus      => dataMinusUsb,
         usbPlus       => dataPlusUsb
      );
   U_6 : sd_control
      PORT MAP (
         clk        => clk,
         rst        => rst,
         sd_clock   => scl_internal,
         fifo_empty => fifoEmpty,
         data_in    => rData,
         data_out   => dout,
         clk_mode   => clk_mode,
         tsr_load   => tsrLoad,
         sd_enable  => sd_enable,
         clk_enable => sclEnable,
         data_read  => data_read
      );

   -- Implicit buffered output assignments
   scl <= scl_internal;

END struct;
